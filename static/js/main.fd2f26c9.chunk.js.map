{"version":3,"sources":["serviceWorker.js","components/UserInfo.js","containers/UserInfoContainer.js","actions/auth.js","components/Auth.js","firebase/index.js","firebase/config.js","containers/AuthContainer.js","components/App.js","containers/AppContainer.js","reducers/auth.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","UserInfo","react_default","a","createElement","this","props","displayName","Button_default","variant","color","onClick","doLogout","React","Component","UserInfoContainer","connect","state","uid","auth","dispatch","confirm","firebase","signOut","type","UseInfo","Auth","refLogin","classes","className","main","CssBaseline_default","Paper_default","paper","Avatar_default","avatar","LockOutlined_default","Typography_default","component","form","FormControl_default","margin","required","fullWidth","InputLabel_default","htmlFor","Input_default","id","name","autoComplete","autoFocus","FormControlLabel_default","control","Checkbox_default","value","label","submit","doLogin","withStyles","theme","Object","defineProperty","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","marginTop","flexDirection","alignItems","padding","concat","backgroundColor","palette","secondary","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firAuth","AuthContainer","isAuth","provider","GoogleAuthProvider","signInWithPopup","onAuthStateChanged","user","payload","email","loginOk","App","containers_UserInfoContainer","containers_AuthContainer","AppContainer","console","log","initialState","arguments","length","undefined","action","assign","rootReducer","combineReducers","store","applyMiddleware","thunk","createStore","devToolsExtension","ReactDOM","render","es","containers_AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd2f26c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\n\r\nexport default class UserInfo extends React.Component {\r\n    \r\n    render () {\r\n        return (\r\n            <div>\r\n                <p>Hello!  { this.props.displayName }</p>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.props.doLogout}>Logout</Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import firebase from 'firebase'\r\nimport { connect } from \"react-redux\"\r\nimport { logOut } from \"../actions/auth\"\r\nimport UseInfo from \"../components/UserInfo\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        uid: state.auth.uid,\r\n        displayName: state.auth.displayName,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        doLogout: () => {\r\n            if (window.confirm(\"are you logout?\")){\r\n                firebase.auth().signOut()\r\n                dispatch(logOut())\r\n            } else {\r\n                return\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst UserInfoContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(UseInfo)\r\n\r\nexport default UserInfoContainer;","export const LOGIN_OK = \"LOGIN_OK\"\r\nexport const LOGOUT = \"LOGOUT\"\r\n\r\nexport const loginOk = (user) => {\r\n    return {\r\n        type: LOGIN_OK,\r\n        payload: {\r\n            displayName: user.displayName,\r\n            email: user.email,\r\n            uid: user.uid,\r\n        }\r\n    }\r\n}\r\n\r\nexport const logOut = () => {\r\n    return {\r\n        type: LOGOUT\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\nconst styles = theme => ({\r\n  main: {\r\n    width: 'auto',\r\n    display: 'block', // Fix IE 11 issue.\r\n    marginLeft: theme.spacing.unit * 3,\r\n    marginRight: theme.spacing.unit * 3,\r\n    [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\r\n      width: 400,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing.unit * 8,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing.unit,\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing.unit,\r\n  },\r\n  submit: {\r\n    marginTop: theme.spacing.unit * 3,\r\n  },\r\n});\r\n\r\nclass Auth extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        this.props.refLogin()\r\n    }\r\n    render() {\r\n\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            \r\n            <main className={classes.main}>\r\n            <CssBaseline />\r\n            <Paper className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              <form className={classes.form}>\r\n                <FormControl margin=\"normal\" required fullWidth>\r\n                  <InputLabel htmlFor=\"email\">Email Address</InputLabel>\r\n                  <Input id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus />\r\n                </FormControl>\r\n                <FormControl margin=\"normal\" required fullWidth>\r\n                  <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                  <Input name=\"password\" type=\"password\" id=\"password\" autoComplete=\"current-password\" />\r\n                </FormControl>\r\n                <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign in ( not Active )\r\n                </Button>\r\n                <Button\r\n                    onClick={this.props.doLogin}\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                  Google Login\r\n                </Button>\r\n              </form>\r\n            </Paper>\r\n          </main>\r\n        )\r\n    }\r\n}\r\n\r\nAuth.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n  \r\nexport default withStyles(styles)(Auth);","import firebase from 'firebase'\r\nimport { config } from './config'\r\n\r\nfirebase.initializeApp(config)\r\nexport const firAuth = firebase.auth()","export const config = {\r\n    apiKey: \"AIzaSyDzIsv_AMuO1sY9O2r3b4sOnPYA1h4bGgg\",\r\n    authDomain: \"freeworks-9bb68.firebaseapp.com\",\r\n    databaseURL: \"https://freeworks-9bb68.firebaseio.com\",\r\n    projectId: \"freeworks-9bb68\",\r\n    storageBucket: \"freeworks-9bb68.appspot.com\",\r\n    messagingSenderId: \"636066987238\"\r\n};","import firebase from \"firebase\"\r\nimport { connect } from \"react-redux\"\r\nimport Auth from \"../components/Auth\"\r\nimport { loginOk } from \"../actions/auth\"\r\nimport { firAuth } from \"../firebase\"\r\n \r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.isAuth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // display login pop-up (only)\r\n        doLogin: () => {\r\n            let provider = new firebase.auth.GoogleAuthProvider()\r\n            firAuth.signInWithPopup(provider)\r\n        },\r\n        // change loginCondition in firebase -> change loginCondition in redux \r\n        refLogin: () => {\r\n            firAuth.onAuthStateChanged(user => {\r\n                if (!user) {\r\n                    return\r\n                }\r\n                dispatch(loginOk(user))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Auth)\r\n\r\nexport default AuthContainer;","import React, { Component } from 'react';\nimport '../App.css';\n\nimport UserInfoContainer from '../containers/UserInfoContainer'\nimport AuthContainer from '../containers/AuthContainer'\n//import { firebaseApp } from '../firebase' //これ必要らしい\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        { this.props.uid? <UserInfoContainer /> : <AuthContainer /> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// import firebase from 'firebase'\r\nimport { connect } from 'react-redux'\r\nimport App from '../components/App'\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state.auth.uid)\r\n    return {\r\n        uid: state.auth.uid,\r\n    }\r\n}\r\nconst AppContainer = connect(\r\n    mapStateToProps\r\n)(App)\r\n\r\nexport default AppContainer;","const initialState = {\r\n    uid: null,\r\n    displayName: null,\r\n    email: null,\r\n}\r\n\r\nconst auth = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case \"LOGIN_OK\": {\r\n            return Object.assign({}, state, {\r\n                uid: action.payload.uid,\r\n                displayName: action.payload.displayName,\r\n                email: action.payload.email,\r\n            })\r\n        }\r\n        case \"LOGOUT\": {\r\n            return Object.assign({}, state, {\r\n                uid: null,\r\n                displayName: null,\r\n                email: null,\r\n            })\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default auth;","import { combineReducers } from \"redux\"\r\nimport auth from \"./auth\"\r\n\r\nconst rootReducer = combineReducers({\r\n    auth\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport AppContainer from \"./containers/AppContainer\"\nimport rootReducer from \"./reducers/index\"\nimport thunk from \"redux-thunk\"\n\n\nconst store = applyMiddleware(\n    thunk,\n)(createStore)(rootReducer, window.devToolsExtension && window.devToolsExtension());\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}